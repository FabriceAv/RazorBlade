<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    var razorLanguageDir = Host.ResolvePath("../../../lib/razor-compiler/src/Microsoft.AspNetCore.Razor.Language/src");
    var inputFiles = Directory.GetFiles(razorLanguageDir, "*.resx", SearchOption.TopDirectoryOnly);
    Array.Sort(inputFiles);
#>
// <auto-generated />

using System.Globalization;

namespace Microsoft.AspNetCore.Razor.Language;

#if !RAZOR_EXTERNAL_LIB

<#
    foreach (var inputFile in inputFiles)
    {
        var items = XDocument.Load(inputFile).Descendants("data");
#>
internal static class <#= Path.GetFileNameWithoutExtension(inputFile) #>
{
<#
        foreach (var item in items)
        {
            var name = item.Attribute("name")?.Value ?? string.Empty;
            var value = item.Element("value")?.Value ?? string.Empty;
#>
    internal static string <#= name #>
        => <#= VerbatimString(value) #>;
<#
            // ForTea doesn't seem to like LINQ in .NET Standard projects :'(

            var maxParam = -1;
            foreach (Match match in Regex.Matches(value, @"\{(?<nb>[0-9]+)\}"))
                maxParam = Math.Max(maxParam, int.Parse(match.Groups["nb"].Value));

            if (maxParam >= 0)
            {
                var argsSb = new StringBuilder();
                var paramsSb = new StringBuilder();

                for (var p = 0; p <= maxParam; ++p)
                {
                    argsSb.Append("object p").Append(p);
                    paramsSb.Append("p").Append(p);

                    if (p < maxParam)
                    {
                        argsSb.Append(", ");
                        paramsSb.Append(", ");
                    }
                }
#>

    internal static string Format<#= name #>(<#= argsSb #>)
        => string.Format(CultureInfo.InvariantCulture, <#= name #>, <#= paramsSb #>);
<#
            }
#>

<#
        }
#>
}

<#
    }
#>
#endif
<#+
    private static string VerbatimString(string value)
        => $"@\"{value.Replace("\"", "\"\"")}\"";
#>
