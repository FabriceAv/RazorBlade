using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading;
using JetBrains.Annotations;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Diagnostics;
using RazorBlade.Analyzers.Support;
using RazorBlade.MetaAnalyzers.Support;

namespace RazorBlade.MetaAnalyzers;

[Generator]
public class EmbeddedLibraryMetaSourceGenerator : IIncrementalGenerator
{
    private static readonly Regex _newlineRegex = new(@"\r?\n", RegexOptions.Compiled);
    private static readonly Regex _doubleQuotesRegex = new(@"""+", RegexOptions.Compiled);

    internal bool SkipAddSource { get; init; }

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var inputFiles = context.AdditionalTextsProvider
                                .Where(static i => i.Path.EndsWith(".cs", StringComparison.OrdinalIgnoreCase))
                                .Combine(context.AnalyzerConfigOptionsProvider)
                                .Select(static (pair, _) => GetInputFile(pair.Left, pair.Right))
                                .WhereNotNull();

        var memberNames = inputFiles.Select(static (i, _) => i.GetMemberName())
                                    .Collect();

        context.RegisterImplementationSourceOutput(inputFiles, GenerateContent);

        if (!SkipAddSource)
            context.RegisterSourceOutput(memberNames, GenerateAddSource);
    }

    private static InputFile? GetInputFile(AdditionalText additionalText, AnalyzerConfigOptionsProvider analyzerConfigOptions)
    {
        var options = analyzerConfigOptions.GetOptions(additionalText);

        if (!options.TryGetValue("build_metadata.AdditionalFiles.Role", out var role) || !string.Equals(role, "Library", StringComparison.OrdinalIgnoreCase))
            return null;

        return new InputFile(additionalText);
    }

    private static void GenerateContent(SourceProductionContext context, InputFile inputFile)
    {
        var sourceText = inputFile.AdditionalText.GetText(context.CancellationToken);
        if (sourceText is null)
            return;

        var inputText = TransformSource(sourceText.ToString(), context.CancellationToken);
        var memberName = inputFile.GetMemberName();

        var writer = new SourceWriter();
        WriteHeader(writer);

        using (writer.BlockScope())
        {
            var escapeQuotes = GetRawStringLiteralQuotes(inputText);

            writer.WriteLine("//language=csharp");
            writer.WriteLine($"private static string {memberName} => {escapeQuotes}");
            using (writer.IndentScope())
            {
                foreach (var line in _newlineRegex.Split(inputText))
                    writer.WriteLine(line);

                writer.WriteLine($"{escapeQuotes};");
            }
        }

        context.AddSource($"{memberName}.g.cs", writer.ToString());
    }

    private static void GenerateAddSource(SourceProductionContext context, ImmutableArray<string> memberNames)
    {
        var writer = new SourceWriter();
        WriteHeader(writer);

        using (writer.BlockScope())
        {
            writer.WriteLine("public static void AddSource(Microsoft.CodeAnalysis.SourceProductionContext context)");

            using (writer.BlockScope())
            {
                foreach (var memberName in memberNames.OrderBy(i => i, StringComparer.OrdinalIgnoreCase))
                    writer.WriteLine($"""context.AddSource("{memberName}.g.cs", {memberName});""");
            }
        }

        context.AddSource("AddSource.g.cs", writer.ToString());
    }

    private static void WriteHeader(SourceWriter writer)
    {
        writer.WriteLine("// <auto-generated />");
        writer.WriteLine();
        writer.WriteLine("namespace RazorBlade.Analyzers;");
        writer.WriteLine();
        writer.WriteLine("internal static partial class EmbeddedLibrary");
    }

    private static string TransformSource([LanguageInjection("csharp")] string sourceText, CancellationToken cancellationToken)
    {
        // - Add header comment
        // - Add #nullable enable
        // - Make public top-level types internal
        // - Remove JetBrains annotations

        sourceText = $"""
            // This file is part of the RazorBlade library.

            #nullable enable

            {sourceText}
            """;

        var syntaxTree = CSharpSyntaxTree.ParseText(sourceText, CSharpParseOptions.Default, cancellationToken: cancellationToken);
        var root = syntaxTree.GetRoot(cancellationToken);

        root = new TopLevelTypesVisibilityRewriter().Visit(root);
        root = new RemoveJetBrainsAnnotationsRewriter().Visit(root);

        return root.ToFullString();
    }

    private static string GetRawStringLiteralQuotes(string value)
    {
        var escapeQuotesLength = 3;
        foreach (Match match in _doubleQuotesRegex.Matches(value))
            escapeQuotesLength = Math.Max(escapeQuotesLength, match.Length + 1);

        return new string('"', escapeQuotesLength);
    }

    private record InputFile(AdditionalText AdditionalText)
    {
        public string GetMemberName()
            => Path.GetFileNameWithoutExtension(AdditionalText.Path);
    }

    private class TopLevelTypesVisibilityRewriter : CSharpSyntaxWalker
    {
        private readonly List<SyntaxToken> _toReplace = new();

        public new SyntaxNode Visit(SyntaxNode root)
        {
            _toReplace.Clear();
            base.Visit(root);

            return root.ReplaceTokens(
                _toReplace,
                static (token, _) => SyntaxFactory.Token(SyntaxKind.InternalKeyword)
                                                  .WithTriviaFrom(token)
            );
        }

        public override void DefaultVisit(SyntaxNode node)
        {
            if (node is BaseTypeDeclarationSyntax type)
            {
                HandleTopLevelMember(type);
                return;
            }

            base.DefaultVisit(node);
        }

        public override void VisitDelegateDeclaration(DelegateDeclarationSyntax node)
            => HandleTopLevelMember(node);

        private void HandleTopLevelMember(MemberDeclarationSyntax node)
        {
            foreach (var modifier in node.Modifiers)
            {
                if (modifier.IsKind(SyntaxKind.PublicKeyword))
                    _toReplace.Add(modifier);
            }
        }
    }

    private class RemoveJetBrainsAnnotationsRewriter : CSharpSyntaxRewriter
    {
        private static readonly HashSet<string> _attributes = new()
        {
            "CanBeNull", "NotNull", "ItemNotNull", "ItemCanBeNull", "StringFormatMethod", "StructuredMessageTemplate", "ValueProvider", "ValueRange",
            "NonNegativeValue", "InvokerParameterName", "NotifyPropertyChangedInvocator", "ContractAnnotation", "LocalizationRequired",
            "CannotApplyEqualityOperator", "Component", "BaseTypeRequired", "UsedImplicitly", "MeansImplicitUse", "PublicAPI", "InstantHandle",
            "MustUseReturnValue", "RequireStaticDelegate", "ProvidesContext", "PathReference", "SourceTemplate", "Macro", "CollectionAccess", "AssertionMethod",
            "AssertionCondition", "TerminatesProgram", "LinqTunnel", "NoEnumeration", "RegexPattern", "LanguageInjection", "NoReorder", "CodeTemplate",
            "AspChildControlType", "AspDataField", "AspDataFields", "AspMethodProperty", "AspRequiredAttribute", "AspTypeProperty", "AspMvcAreaMasterLocationFormat",
            "AspMvcAreaPartialViewLocationFormat", "AspMvcAreaViewLocationFormat", "AspMvcMasterLocationFormat", "AspMvcPartialViewLocationFormat",
            "AspMvcViewLocationFormat", "AspMvcAction", "AspMvcArea", "AspMvcController", "AspMvcMaster", "AspMvcModelType", "AspMvcPartialView",
            "AspMvcSuppressViewError", "AspMvcDisplayTemplate", "AspMvcEditorTemplate", "AspMvcTemplate", "AspMvcView", "AspMvcViewComponent",
            "AspMvcViewComponentView", "AspMvcActionSelector", "RouteTemplate", "RouteParameterConstraint", "UriString", "AspRouteConvention",
            "AspDefaultRouteValues", "AspRouteValuesConstraints", "AspRouteOrder", "AspRouteVerbs", "AspAttributeRouting", "AspMinimalApiDeclaration",
            "AspMinimalApiHandler", "HtmlElementAttributes", "HtmlAttributeValue", "RazorSection", "RazorImportNamespace", "RazorInjection",
            "RazorDirective", "RazorPageBaseType", "RazorHelperCommon", "RazorLayout", "RazorWriteLiteralMethod", "RazorWriteMethod", "RazorWriteMethodParameter",
            "XamlItemsControl", "XamlItemBindingOfItemsControl", "XamlItemStyleOfItemsControl", "XamlOneWayBindingModeByDefault", "XamlTwoWayBindingModeByDefault"

            // "Pure" can be confused with System.Diagnostics.Contracts.PureAttribute, so we don't remove it.
        };

        public override SyntaxNode? VisitUsingDirective(UsingDirectiveSyntax node)
        {
            if (node.Name.ToString() == "JetBrains.Annotations")
                return null;

            return node;
        }

        public override SyntaxNode? VisitAttribute(AttributeSyntax node)
        {
            if (_attributes.Contains(node.Name.ToString()))
                return null;

            return node;
        }

        public override SyntaxNode? VisitAttributeList(AttributeListSyntax node)
        {
            var newAttributes = node.Attributes;

            for (var i = node.Attributes.Count - 1; i >= 0; i--)
            {
                if (VisitListElement(node.Attributes[i]) is null)
                    newAttributes = newAttributes.RemoveAt(i);
            }

            return newAttributes.Count != 0
                ? node.WithAttributes(newAttributes)
                : null;
        }
    }
}
